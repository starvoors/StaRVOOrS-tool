This folder contains files which can be used to test StaRVOOrS. Below, you can find a description for them.

* Folder 'CoffeeBrew' contains the source code to be analised when running the tests.
* Folder 'ExpOut' contains files describing the output that is expected to be obtained when running StaRVOOrS against the files described above.
* Folder 'Specs' contains the ppDATE specfications used in the tests.
|-- File 'grammar.ppd' is meant to be run in only parsing mode. It is used to test the parser of the tool. It covers all of the features and constructs of the (ppDATE) script language. It should be parsed successfully.
|-- File 'pinit_section.ppd' is used to the test that templates are successfully instantiated at runtime when the PINIT section is used to create their instances.
|-- File 'automata_communication.ppd' is used to the test the communication between automata, using the action '\gen(e)' (i.e. e!) to generate the event e, and the trigger 'e?' to react to such an event.
|-- File 'monitor_behaviour.ppd' is used to test the behaviour of different monitor artifacts (at runtime), and the instansiation of templates using action \create.
|-- File 'templates_behaviour.ppd' to test the behaviour of templates when multiple instantiations of a template occur at runtime.
|-- File 'hoare_triples_behaviour.ppd' is used to test the verification of Hoare triples (at runtime).

* File TestSuite.hs contains the test cases. All the tests, i.e. parsing, translation of the specification and specification refinement, are supposed to succeed. Below, you can find a description with the expected monitor behaviour for each test. This information should match the information contain in the log file generated by the monitor. 

* File RunTests.hs is used to run the test cases. You have to provide as arguments (1) the path to StaRVOOrS binary execution file; and (2) the name of the test case to run. In (2), you can provide the keyword 'all' in order to run all of the test cases in the test suite.

e.g. RunTests starvoors-binary test-case

----------------------------------------------
-- Expected monitor behaviour in test cases --
----------------------------------------------

* Test case 'automata_communication_case_1' -> There should be 4 calls to method Channel.receive() in 'prop1', and other 4 calls for this method in 'prop2' (8 calls in total).

* Test case 'automata_communication_case_2' -> There should be 2 calls to method Channel.receive() in 'prop1', and other 2 calls for this method in 'prop2' (4 calls in total).

* Test case 'test_grammar' -> No monitor analysis for this test (it tests only the parsing of the provided specification).

* Test case 'pinit_section' -> Two instances of the template should be created, no violations of the specification should occur.

* Test case 'monitor_behaviour' -> The following entries should be found in the log file generated by the monitor, in this exact same order:

 - Clean from main automaton
 - The value of tmp is : 10
 - Template created
 - The value of tmp is : 20 
 - Clean from main automaton 
 - Clean from template 
 - clean_filter_error_preOK
 - clean_filter_error_bad
 - !!!SYSTEM REACHED BAD STATE!!! in [clean_filter_error]
 - The value of tmp is : 30
 - The value of tmp is : 40
 - !!!SYSTEM REACHED BAD STATE!!! in [prop1_tmp_cact1]
 - !!!SYSTEM REACHED BAD STATE!!! in [prop]

Test case 'templates_behaviour' -> Three instances of the template should be created. The following entries should be found in the log file generated by the monitor, in this exact same order:

 - The value of tmp is : 10 
 - Template created 
 - The value of tmp is : 10 
 - Template created 
 - The value of tmp is : 20 
 - The value of tmp is : 20 
 - Clean from main automaton 
 - Clean from template 
 - clean_filter_error_preOK
 - clean_filter_error_bad
 - !!!SYSTEM REACHED BAD STATE!!! in [clean_filter_error]
 - The value of tmp is : 30
 - The value of tmp is : 40 
 - Clean from main automaton
 - The value of tmp is : 50
 - Clean from main automaton 
 - Clean from template 
 - clean_filter_error_preOK
 - clean_filter_error_bad
 - !!!SYSTEM REACHED BAD STATE!!! in [prop1_tmp_cact1]
 - The value of tmp is : 30 
 - The value of tmp is : 40
 - !!!SYSTEM REACHED BAD STATE!!! in [prop1_tmp_cact1]
 - The value of tmp is : 10 
 - Template created 
 - The value of tmp is : 20 
 - !!!SYSTEM REACHED BAD STATE!!! in [prop]
 - !!!SYSTEM REACHED BAD STATE!!! in [prop1_tmp_cact1]

Test case 'hoare_triples_behaviour' -> The following entries should be found in the log file generated by the monitor, in this exact same order:

- brew_ok4_preOK
- brew_ok4_bad
- !!!SYSTEM REACHED BAD STATE!!! in [brew_ok4]
- brew_ok1_preOK
- brew_ok1_bad
- !!!SYSTEM REACHED BAD STATE!!! in [brew_ok1]
- clean_filter_impossible_preOK
- clean_filter_impossible_bad
- !!!SYSTEM REACHED BAD STATE!!! in [clean_filter_impossible]
- brew_ok1_preOK
- brew_ok1_bad
- !!!SYSTEM REACHED BAD STATE!!! in [brew_ok1]
- brew_ok1_preOK
- brew_ok1_bad
- !!!SYSTEM REACHED BAD STATE!!! in [brew_ok1]
- brew_ok2_preOK
- brew_ok2_postOK
- SYSTEM REACHED AN ACCEPTED STATE in [brew_ok2]
- brew_ok1_preOK
- brew_ok1_bad
- !!!SYSTEM REACHED BAD STATE!!! in [brew_ok1]
- brew_ok2_preOK
- brew_ok2_bad
- !!!SYSTEM REACHED BAD STATE!!! in [brew_ok2]

In addition, brew_ok1 should be verified at least once for each instance of class CMachine, brew_ok2 should be verified for two 
instances of class CMachine, and brew_ok4_preOK is verified for only one such an instance.

