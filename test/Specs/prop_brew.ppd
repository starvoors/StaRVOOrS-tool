IMPORTS {
import main.CMachine;
import java.util.Collection;
}

GLOBAL {

VARIABLES {
 int tmp = 0;
}

TRIGGERS {
brew_entry() = {CMachine cm.brew()entry}
brew_exit(CMachine cm) = {cm.brew()exit()}
cleanF_entry(CMachine cm) = {cm.cleanF()entry}
cleanF_exit() = {CMachine cm.cleanF()exit()}
foo_exit(String ret,String s) = {CMachine cm.foo(s)exit(ret)} 
}
 
PROPERTY prop1 {

STATES
{
STARTING { q (brew_ok,brew_ok1,clean_filter_ok) ; }
BAD { bad ; }
NORMAL { q2 (brew_error,clean_filter_error) ;}
}

TRANSITIONS
{
q -> q2 [brew_entry \ cm.cups < cm.limit  \ tmp=add(tmp) ; \log("The value of tmp is: %d",tmp);]
q2 -> q [brew_exit \\ \create (brew_tmp, cm, \log("Ojojoj"), cleanF_entry,true,brew_ok,brew) ;]
q2 -> bad [ brew_entry ]
q2 -> bad [ cleanF_entry ]
}
}

PROPERTY prop2 {

STATES
{
STARTING { q (brew_ok,brew_ok1,clean_filter_ok) ; }
BAD { bad ; }
NORMAL { q2 (brew_error,clean_filter_error) ;}
}

TRANSITIONS
{
q -> q2 [brew_entry \ cm.cups < cm.limit  \ tmp=add(tmp) ; \log("The value of tmp is: %d",tmp);]
q2 -> q [brew_exit \\ \create (brew_tmp, cm, \log("Ojojoj"), cleanF_entry,true,brew_ok,brew) ;]
q2 -> bad [ brew_entry ]
q2 -> bad [ cleanF_entry ]
}
}

}

TEMPLATES {
 TEMPLATE brew_tmp (CMachine cmt,Action a,Trigger tr,Condition c,HTriple h,MethodName mn) {
    TRIGGERS {
       brew_entry2() = {cmt.brew()entry}
       brew_exit2()  = {cmt.mn()exit()}
    }
    PROPERTY prop1_tmp {
       STATES {
          STARTING { q (h) ; }
          BAD { bad ; }
          NORMAL { q2 ;}
       }
       TRANSITIONS {
           q -> q2 [brew_entry2 ]
           q2 -> q [tr \ \ a ;]
           q2 -> bad [ brew_entry2 \ c ]
           q2 -> bad [ tr ]
       }
    }
 }
}

HTRIPLES {

HT brew_ok
{
PRE {cups < limit}
METHOD {CMachine.brew()}
POST {cups == \old(cups+1)}
ASSIGNABLE {cups}
}

HT brew_ok1
{
PRE {true}
METHOD {CMachine.brew(int)}
POST {false}
ASSIGNABLE {\nothing}
}

HT brew_error
{
PRE {cups < limit}
METHOD {CMachine.brew()}
POST {cups == \old(cups)}
ASSIGNABLE {cups}
}

HT clean_filter_ok
{
PRE {true}
METHOD {CMachine.cleanF}
POST {cups == 0}
ASSIGNABLE {cups}
}

HT clean_filter_error
{
PRE {true}
METHOD {CMachine.cleanF}
POST {cups == \old(cups)}
ASSIGNABLE {cups}
}

}

METHODS {
 int add(int n) {
    int i = 0;

    while (i < 10)
    { i++ ;} 

    return i ;
 }
}
