IMPORTS {
import main.CMachine;
}

GLOBAL {

FOREACH (CMachine cmt) {

VARIABLES {
 int tmp = 0;
}

TRIGGERS {
brew_entry() = {CMachine cm.brew()entry} where { cmt = cm ;}
brew_exit(CMachine cm) = {cm.brew()exit()} where { cmt = cm ;}
cleanF_entry(CMachine cm) = {cm.cleanF()entry} where { cmt = cm ;}
}
 
PROPERTY prop {

STATES
{
STARTING { q (brew_ok,clean_filter_ok) ; }
BAD { bad ; }
NORMAL { q2 (brew_error,clean_filter_error) ;}
}

TRANSITIONS
{
q -> q2 [brew_entry \ cm.cups < cm.limit  \ tmp=tmp+add(42) ; \log("\nThe value of tmp is: %d\n\n",tmp);]
q -> q [cleanF_entry \ \ \log("\nClean from main automaton\n\n");]
q -> bad [brew_entry \ cm.cups >= cm.limit \ ]
q2 -> q [brew_exit \\ IF (tmp <= 10) THEN { \create(brew_tmp, cm, \log("\nClean from template\n\n"),true,brew) ; \log("\nTemplate created\n\n") ; } ; ]
q2 -> bad [ brew_entry ] 
q2 -> bad [ cleanF_entry ]
}
}
}

}

TEMPLATES {
 TEMPLATE brew_tmp (CMachine cmt,Action a,Condition c,MethodName mn) {
    TRIGGERS {
       brew_entry2() = {cmt.mn()entry}
       cleanF_entry2() = {cmt.cleanF()entry}
    }
    PROPERTY prop1_tmp {
       STATES {
          STARTING { q ; }
          BAD { bad ; }
          NORMAL { q2 (clean_filter_error) ;}
       }
       TRANSITIONS {
           q -> q2 [brew_entry2 ]
           q2 -> q [cleanF_entry2 \ \ a ;]
           q2 -> bad [ brew_entry2 \ c ]
       }
    }
 }
}

HTRIPLES {

HT brew_ok
{
PRE {cups < limit}
METHOD {CMachine.brew()}
POST {cups == \old(cups+1)}
ASSIGNABLE {cups}
}

HT brew_error
{
PRE {cups < limit}
METHOD {CMachine.brew()}
POST {cups == \old(cups)}
ASSIGNABLE {cups}
}

HT clean_filter_ok
{
PRE {true}
METHOD {CMachine.cleanF}
POST {cups == 0}
ASSIGNABLE {cups}
}

HT clean_filter_error
{
PRE {true}
METHOD {CMachine.cleanF}
POST {cups == \old(cups)}
ASSIGNABLE {cups}
}

}

METHODS {
 int add(int n) {
    int i = 0;

    while (i < 10)
    { i++ ;} 

    return i ;
 }
}
