IMPORTS {
import main.Foo;
import k;
import main.Goo;
import main.Hoo;
}

GLOBAL {

VARIABLES {
List<PurseList> purseLists = new ArrayList<PurseList>();
Map<String,String> map ;
int[] data = {10,20,30,40,50,60,71,80,90,91};

int f;
final double p;
boolean l, o = true;
u l = f+1-5*9 / 9;
Clock c = new Clock();
Channel ch = new Channel();
}

ACTEVENTS { ie1, ie2 , ie3}

TRIGGERS { 
e_1 (int val) = {Hoo g.add(val,*)entry} 
e1 () = {Hoo t.add(*)entry} 
e2 (int val, int ret) = {Foo p.add(val)exit(ret)}
e5 (int val, int r) = {*.add()exit() } where { val = l ; int r = a.add(*) ;}
e4() = {*.goo()entry}
fc() = { c@3 }
rec()  = { ch.receive()entry }
any(int j) = {{e_1} | {e2} | {e4}} where {j = 2 ;}
any2() = {{e_1()} | {e2()} | {e4()}}
any3() = { e_1 | e2 | e4 }
any4() = { {e_1} | e2 | e4()}
any7(int j) = { {e_1 | e2} where {j = 1 ;} }
any5(int j) = { {e_1 | e2} where {j = 1 ;} | {e1}} where {j = 2 ;}
any6(int j) = { {e_1() | e2()} where {j = 1 ;} | {e2}} where {j = 42 ;}
exec() = {execution *.goo()entry}
h() = {call *.goo()entry}
c2() = {call Foo h.goo()entry}
timeout() = { c@1}
timeout2() = { c@%5}

}

PROPERTY prop_algo {
  PINIT { (example_temp,Integer) }
}

PROPERTY prop_name1 {
 STATES {
   STARTING { q1 (prop4) ;}
   ACCEPTING { q8 ; }
   BAD { bad {System.out.printf("initial %d \n", n) ;} ; }
   NORMAL {q4 ; q5 ; q6 ; q7 ; q3 ; q2 {System.out.printf("initial with hoare triples %d \n", n) ;} (prop2, prop3) ;}   
 }

 TRANSITIONS {
   q1 -> q1 [e2]
   q2 -> q2 [e2 \ ] 
   q3 -> q3 [e2 \ h(1, 2) == false ]
   q4 -> q4 [ie2? \ \]
   q5 -> q5 [e2 \ cond \ ]
   q6 -> q6 [e2 \ cond \ \log("hello %d",i); s::c.size(s::o) ; IF (!(b && u)) THEN foo() ;]
   q7 -> q7 [e2 \ \ v = 4 ;  \create(example_temp,new Integer(7), { \log("Ojojoj") ; \log("Ojojoj") ; }) ; ]  
   q8 -> q8 [e2\c\ IF (b == u) THEN foo();bang(ie1) ; \gen(e) ;]
 }
} %% End prop_name1

FOREACH (Principal p) {

PROPERTY prop_name2 {
 STATES {
   STARTING { q1 (prop4) ;}
   ACCEPTING { q8 ; }
   BAD { bad {System.out.printf("initial %d \n", n) ;} ; }
   NORMAL {q4 ; q5 ; q6 ; q7 ; q3 ; q2 {System.out.printf("initial with hoare triples %d \n", n) ;} (prop2, prop3) ;}   
 }

 TRANSITIONS {
   q1 -> q1 [e2]
   q2 -> q2 [e2 \ ] 
   q3 -> q3 [e2 \ h(1, 2) == false ]
   q4 -> q4 [ie2? \ \]
   q5 -> q5 [e2 \ cond \ ]
   q6 -> q6 [e2 \ cond \ \log("hello %d",i); s::c.size(s::o) ; IF (!(b && u)) THEN foo() ;]
   q7 -> q7 [e2 \ \ v = 4 ;  \create(example_temp,new Integer(7), { \log("Ojojoj") ; \log("Ojojoj") ; }) ; ]  
   q8 -> q8 [e2\c\ IF (b == u) THEN foo();bang(ie1) ; \gen(e) ;]
 }
} %% End prop_name1
} %% End Foreach Principal



} %%End Global

TEMPLATES {
  TEMPLATE example_temp (Integer f,Action act) {
     VARIABLES {
         int temp;
     }
     TRIGGERS {
         d_1 (int val) = {Foo g.add(val)entry} 
     }
     PROPERTY temp_prop { 
            STATES {
                STARTING { s (prop1) ;}
                ACCEPTING { q1 ; }
                BAD { bad ; }
                NORMAL {q2 ; i (prop2, prop3) ;}                
            }
            TRANSITIONS {
               q1 -> q1 [d_1]
               q2 -> q2 [d_1 \ ] 
            }
     } %% End temp_prop  
  }%%end template
}

CINVARIANTS {
Foo { c == h[3] }
Foo {v}
Goo {\typeof(h) == \type(Object[])}
}

HTRIPLES {

HT prop1 {
 PRE { p1 > 0 && p2 < 3 || !p8}
 METHOD {Foo.foo}
 POST {(\forall int i ; i>= 0 && l<=0; true) && (\exists bool b ; p ; l)}
 ASSIGNABLE {h[*],lop}
}

HT prop2 {
 PRE { true && !(b || c)}
 METHOD {Goo.goo()}
 POST {c == \old(c+1) || \result == h}
 ASSIGNABLE {\everything}
}

HT prop3 {
 PRE { false }
 METHOD {Hoo.hoo(int,boolean)}
 POST {(\forall int i ; i > 0) && (\exists bool b ; p)}
 ASSIGNABLE {\nothing}
}

HT prop4 {
 METHOD {Hoo.hoo(int,boolean)}
}

HT req_operation_ok
{
PRE {m != null && checkSameTransaction(m) == SWResponses.SW_SUCCESS && transaction.value <= balance
     && status == ProtocolStatus.Epr }
METHOD {Goo.req_operation}
POST { status == ProtocolStatus.Epr ==> (\result == SWResponses.SW_SUCCESS && (balance == \old(balance)-transaction.value)
        && status == ProtocolStatus.Epa) }
ASSIGNABLE { balance,status}
}

}

METHODS {

 int pepeu, palala; 

 boolean check1 (int val, int b) { return 0 ;}

 int gg = 9;
 boolean check2 (int val, int b) { 
   if (b == 0) return false ;
   else {return true ; }
 }
}
