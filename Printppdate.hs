{-# OPTIONS_GHC -fno-warn-incomplete-patterns #-}
module Printppdate where

-- pretty-printer generated by the BNF converter

import Absppdate
import Data.Char


-- the top-level printing method
printTree :: Print a => a -> String
printTree = render . prt 0

type Doc = [ShowS] -> [ShowS]

doc :: ShowS -> Doc
doc = (:)

-- Modify to remove white space before '[' and '('
-- Modify to remove white space between ==
-- Modify to remove white spaces around '.'
-- Modify to remove white space after '\\' and '!'
-- Modify to remove white space in "> =", "< =" , "! =" "& &" and "| |"
-- Modify to remove white space after openning \" and before closing \"
render :: Doc -> String
render d = rend 0 (map ($ "") $ d []) "" where
  rend i ss = case ss of
    "\\"     :ts -> showChar '\\' . rend i ts
    t: "%"   :ts -> space t . showChar '%' . rend i ts
    t: "."   :ts -> showString t . showChar '.' . rend i ts 
    "=" :"=" :ts -> showChar '=' . space "=" . rend i ts
    ">" :"=" :ts -> showChar '>' . space "=" . rend i ts
    "<" :"=" :ts -> showChar '<' . space "=" . rend i ts
    "!" :"=" :ts -> showChar '!' . space "=" . rend i ts
    "!" :t   :ts -> showChar '!' . showString t . rend i ts
    "&" :"&" :ts -> showChar '&' . space "&" . rend i ts
    "|" :"|" :ts -> showChar '|' . space "|" . rend i ts
    t : "["  :ts -> showString t . showChar '[' . rend i ts
    t : "("  :ts -> showString t . showChar '(' . rend i ts
    "{"      :ts -> showChar '{' . new (i+1) . rend (i+1) ts
    "}" : ";":ts -> new (i-1) . space "}" . showChar ';' . new (i-1) . rend (i-1) ts
    "}"      :ts -> new (i-1) . showChar '}' . new (i-1) . rend (i-1) ts
    ";"      :ts -> showChar ';' . new i . rend i ts
    t  : "," :ts -> showString t . space "," . rend i ts
    t  : ")" :ts -> showString t . showString ") " . rend i ts
    t  : "]" :ts -> showString t . showChar ']' . rend i ts
    "\""     :ts -> showChar '\"' . rend i ts
    t  :"\"" :ts -> if (t == " ") then showChar '\"' . rend i ts 
                                  else showString t . showChar '\"' . rend i ts 
    t        :ts -> space t . rend i ts
    _            -> id
  new i   = showChar '\n' . replicateS (2*i) (showChar ' ') . dropWhile isSpace
  space t = showString t . (\s -> if null s then "" else (' ':s))

parenth :: Doc -> Doc
parenth ss = doc (showChar '(') . ss . doc (showChar ')')

concatS :: [ShowS] -> ShowS
concatS = foldr (.) id

concatD :: [Doc] -> Doc
concatD = foldr (.) id

replicateS :: Int -> ShowS -> ShowS
replicateS n f = concatS (replicate n f)

-- the printer class does the job
class Print a where
  prt :: Int -> a -> Doc
  prtList :: [a] -> Doc
  prtList = concatD . map (prt 0)

instance Print a => Print [a] where
  prt _ = prtList

instance Print Char where
  prt _ s = doc (showChar '\'' . mkEsc '\'' s . showChar '\'')
  prtList s = doc (showChar '"' . concatS (map (mkEsc '"') s) . showChar '"')

mkEsc :: Char -> Char -> ShowS
mkEsc q s = case s of
  _ | s == q -> showChar '\\' . showChar s
  '\\'-> showString "\\\\"
  '\n' -> showString "\\n"
  '\t' -> showString "\\t"
  _ -> showChar s

prPrec :: Int -> Int -> Doc -> Doc
prPrec i j = if j<i then parenth else id


instance Print Integer where
  prt _ x = doc (shows x)


instance Print Double where
  prt _ x = doc (shows x)



instance Print Id where
  prt _ (Id i) = doc (showString ( i))


instance Print Symbols where
  prt _ (Symbols i) = doc (showString ( i))



instance Print AbsPPDATE where
  prt i e = case e of
   AbsPPDATE imports global cinvariants contracts methods -> prPrec i 0 (concatD [prt 0 imports , prt 0 global , prt 0 cinvariants , prt 0 contracts , prt 0 methods])


instance Print Imports where
  prt i e = case e of
   Imports imports -> prPrec i 0 (concatD [doc (showString "IMPORTS") , doc (showString "{") , prt 0 imports , doc (showString "}")])


instance Print Import where
  prt i e = case e of
   Import javafiless -> prPrec i 0 (concatD [doc (showString "import") , prt 0 javafiless])

  prtList es = case es of
   [x] -> (concatD [prt 0 x , doc (showString ";")])
   x:xs -> (concatD [prt 0 x , doc (showString ";") , prt 0 xs])

instance Print JavaFiles where
  prt i e = case e of
   JavaFiles id -> prPrec i 0 (concatD [prt 0 id])

  prtList es = case es of
   [x] -> (concatD [prt 0 x])
   x:xs -> (concatD [prt 0 x , doc (showString ".") , prt 0 xs])

instance Print Global where
  prt i e = case e of
   Global context -> prPrec i 0 (concatD [doc (showString "GLOBAL") , doc (showString "{") , prt 0 context , doc (showString "}")])


instance Print Context where
  prt i e = case e of
   Ctxt variables events properties foreaches -> prPrec i 0 (concatD [prt 0 variables , prt 0 events , prt 0 properties , prt 0 foreaches])


instance Print Variables where
  prt i e = case e of
   VarNil  -> prPrec i 0 (concatD [])
   VarDef variables -> prPrec i 0 (concatD [doc (showString "VARIABLES") , doc (showString "{") , prt 0 variables , doc (showString "}")])


instance Print Variable where
  prt i e = case e of
   Var varmodifier type' vardecls -> prPrec i 0 (concatD [prt 0 varmodifier , prt 0 type' , prt 0 vardecls])

  prtList es = case es of
   [] -> (concatD [])
   x:xs -> (concatD [prt 0 x , doc (showString ";") , prt 0 xs])

instance Print VarModifier where
  prt i e = case e of
   VarModifierFinal  -> prPrec i 0 (concatD [doc (showString "final")])
   VarModifierNil  -> prPrec i 0 (concatD [])


instance Print Events where
  prt i e = case e of
   EventsNil  -> prPrec i 0 (concatD [])
   EventsDef events -> prPrec i 0 (concatD [doc (showString "TRIGGERS") , doc (showString "{") , prt 0 events , doc (showString "}")])


instance Print Event where
  prt i e = case e of
   Event id binds compoundevent whereclause -> prPrec i 0 (concatD [prt 0 id , doc (showString "(") , prt 0 binds , doc (showString ")") , doc (showString "=") , prt 0 compoundevent , prt 0 whereclause])

  prtList es = case es of
   [x] -> (concatD [prt 0 x])
   x:xs -> (concatD [prt 0 x , prt 0 xs])

instance Print CompoundEvent where
  prt i e = case e of
   Collection eventlist -> prPrec i 0 (concatD [prt 0 eventlist])
   NormalEvent binding id varss eventvariation -> prPrec i 0 (concatD [doc (showString "{") , prt 0 binding , prt 0 id , doc (showString "(") , prt 0 varss , doc (showString ")") , prt 0 eventvariation , doc (showString "}")])
   ClockEvent id n -> prPrec i 0 (concatD [doc (showString "{") , prt 0 id , doc (showString "@") , prt 0 n , doc (showString "}")])
   OnlyId id -> prPrec i 0 (concatD [doc (showString "{") , prt 0 id , doc (showString "}")])
   OnlyIdPar id -> prPrec i 0 (concatD [doc (showString "{") , prt 0 id , doc (showString "(") , doc (showString ")") , doc (showString "}")])

  prtList es = case es of
   [] -> (concatD [])
   [x] -> (concatD [prt 0 x])
   x:xs -> (concatD [prt 0 x , doc (showString "|") , prt 0 xs])

instance Print EventList where
  prt i e = case e of
   CECollection compoundevents -> prPrec i 0 (concatD [doc (showString "{") , prt 0 compoundevents , doc (showString "}")])


instance Print EventVariation where
  prt i e = case e of
   EVEntry  -> prPrec i 0 (concatD [doc (showString "entry")])
   EVExit varss -> prPrec i 0 (concatD [doc (showString "exit") , doc (showString "(") , prt 0 varss , doc (showString ")")])
   EVThrow varss -> prPrec i 0 (concatD [doc (showString "uponThrowing") , doc (showString "(") , prt 0 varss , doc (showString ")")])
   EVHadle varss -> prPrec i 0 (concatD [doc (showString "uponHandling") , doc (showString "(") , prt 0 varss , doc (showString ")")])


instance Print Binding where
  prt i e = case e of
   BindingVar bind -> prPrec i 0 (concatD [prt 0 bind , doc (showString ".")])


instance Print Bind where
  prt i e = case e of
   BindStar  -> prPrec i 0 (concatD [doc (showString "*")])
   BindType type' id -> prPrec i 0 (concatD [prt 0 type' , prt 0 id])
   BindId id -> prPrec i 0 (concatD [prt 0 id])

  prtList es = case es of
   [] -> (concatD [])
   [x] -> (concatD [prt 0 x])
   x:xs -> (concatD [prt 0 x , doc (showString ",") , prt 0 xs])

instance Print WhereClause where
  prt i e = case e of
   WhereClauseNil  -> prPrec i 0 (concatD [])
   WhereClauseDef whereexps -> prPrec i 0 (concatD [doc (showString "where") , doc (showString "{") , prt 0 whereexps , doc (showString "}")])


instance Print WhereExp where
  prt i e = case e of
   WhereExp bind varexp -> prPrec i 0 (concatD [prt 0 bind , doc (showString "=") , prt 0 varexp])

  prtList es = case es of
   [x] -> (concatD [prt 0 x , doc (showString ";")])
   x:xs -> (concatD [prt 0 x , doc (showString ";") , prt 0 xs])

instance Print Vars where
  prt i e = case e of
   Vars bind -> prPrec i 0 (concatD [prt 0 bind])

  prtList es = case es of
   [] -> (concatD [])
   [x] -> (concatD [prt 0 x])
   x:xs -> (concatD [prt 0 x , doc (showString ",") , prt 0 xs])

instance Print Properties where
  prt i e = case e of
   PropertiesNil  -> prPrec i 0 (concatD [])
   ProperiesDef id states transitions properties -> prPrec i 0 (concatD [doc (showString "PROPERTY") , prt 0 id , doc (showString "{") , prt 0 states , prt 0 transitions , doc (showString "}") , prt 0 properties])


instance Print States where
  prt i e = case e of
   States accepting bad normal starting -> prPrec i 0 (concatD [doc (showString "STATES") , doc (showString "{") , prt 0 accepting , prt 0 bad , prt 0 normal , prt 0 starting , doc (showString "}")])


instance Print Accepting where
  prt i e = case e of
   AcceptingNil  -> prPrec i 0 (concatD [])
   AcceptingDef states -> prPrec i 0 (concatD [doc (showString "ACCEPTING") , doc (showString "{") , prt 0 states , doc (showString "}")])


instance Print Bad where
  prt i e = case e of
   BadNil  -> prPrec i 0 (concatD [])
   BadDef states -> prPrec i 0 (concatD [doc (showString "BAD") , doc (showString "{") , prt 0 states , doc (showString "}")])


instance Print Normal where
  prt i e = case e of
   NormalNil  -> prPrec i 0 (concatD [])
   NormalDef states -> prPrec i 0 (concatD [doc (showString "NORMAL") , doc (showString "{") , prt 0 states , doc (showString "}")])


instance Print Starting where
  prt i e = case e of
   StartingDef states -> prPrec i 0 (concatD [doc (showString "STARTING") , doc (showString "{") , prt 0 states , doc (showString "}")])


instance Print State where
  prt i e = case e of
   State namestate initialcode contractnames -> prPrec i 0 (concatD [prt 0 namestate , prt 0 initialcode , prt 0 contractnames])

  prtList es = case es of
   [] -> (concatD [])
   x:xs -> (concatD [prt 0 x , doc (showString ";") , prt 0 xs])

instance Print NameState where
  prt i e = case e of
   NameState id -> prPrec i 0 (concatD [prt 0 id])


instance Print ContractNames where
  prt i e = case e of
   CNS contractnames -> prPrec i 0 (concatD [doc (showString "(") , prt 0 contractnames , doc (showString ")")])
   CNSNil  -> prPrec i 0 (concatD [])


instance Print ContractName where
  prt i e = case e of
   CN id -> prPrec i 0 (concatD [prt 0 id])

  prtList es = case es of
   [x] -> (concatD [prt 0 x])
   x:xs -> (concatD [prt 0 x , doc (showString ",") , prt 0 xs])

instance Print InitialCode where
  prt i e = case e of
   InitNil  -> prPrec i 0 (concatD [])
   InitProg java -> prPrec i 0 (concatD [doc (showString "{") , prt 0 java , doc (showString "}")])


instance Print Transitions where
  prt i e = case e of
   Transitions transitions -> prPrec i 0 (concatD [doc (showString "TRANSITIONS") , doc (showString "{") , prt 0 transitions , doc (showString "}")])


instance Print Transition where
  prt i e = case e of
   Transition namestate0 namestate arrow -> prPrec i 0 (concatD [prt 0 namestate0 , doc (showString "->") , prt 0 namestate , doc (showString "[") , prt 0 arrow , doc (showString "]")])

  prtList es = case es of
   [x] -> (concatD [prt 0 x])
   x:xs -> (concatD [prt 0 x , prt 0 xs])

instance Print Arrow where
  prt i e = case e of
   Arrow id condition -> prPrec i 0 (concatD [prt 0 id , prt 0 condition])


instance Print Condition where
  prt i e = case e of
   Cond1  -> prPrec i 0 (concatD [])
   Cond2 cond -> prPrec i 0 (concatD [doc (showString "\\") , prt 0 cond])


instance Print Cond where
  prt i e = case e of
   CondExpDef condexp -> prPrec i 0 (concatD [prt 0 condexp])
   CondAction condexp action -> prPrec i 0 (concatD [prt 0 condexp , doc (showString "\\") , prt 0 action])


instance Print Action where
  prt i e = case e of
   Action java -> prPrec i 0 (concatD [prt 0 java])


instance Print Foreaches where
  prt i e = case e of
   ForeachesNil  -> prPrec i 0 (concatD [])
   ForeachesDef argss context -> prPrec i 0 (concatD [doc (showString "FOREACH") , doc (showString "(") , prt 0 argss , doc (showString ")") , doc (showString "{") , prt 0 context , doc (showString "}")])


instance Print CInvariants where
  prt i e = case e of
   CInvariants cinvariants -> prPrec i 0 (concatD [doc (showString "CINVARIANTS") , doc (showString "{") , prt 0 cinvariants , doc (showString "}")])
   CInvempty  -> prPrec i 0 (concatD [])


instance Print CInvariant where
  prt i e = case e of
   CI id jml -> prPrec i 0 (concatD [prt 0 id , doc (showString "{") , prt 0 jml , doc (showString "}")])

  prtList es = case es of
   [x] -> (concatD [prt 0 x])
   x:xs -> (concatD [prt 0 x , prt 0 xs])

instance Print Contracts where
  prt i e = case e of
   Contracts contracts -> prPrec i 0 (concatD [doc (showString "HTRIPLES") , doc (showString "{") , prt 0 contracts , doc (showString "}")])
   Constempty  -> prPrec i 0 (concatD [])


instance Print Contract where
  prt i e = case e of
   Contract id pre method post assignable -> prPrec i 0 (concatD [doc (showString "HT") , prt 0 id , doc (showString "{") , prt 0 pre , prt 0 method , prt 0 post , prt 0 assignable , doc (showString "}")])

  prtList es = case es of
   [x] -> (concatD [prt 0 x])
   x:xs -> (concatD [prt 0 x , prt 0 xs])

instance Print Pre where
  prt i e = case e of
   Pre jml -> prPrec i 0 (concatD [doc (showString "PRE") , doc (showString "{") , prt 0 jml , doc (showString "}")])


instance Print Method where
  prt i e = case e of
   Method id0 id -> prPrec i 0 (concatD [doc (showString "METHOD") , doc (showString "{") , prt 0 id0 , doc (showString ".") , prt 0 id , doc (showString "}")])


instance Print Post where
  prt i e = case e of
   Post jml -> prPrec i 0 (concatD [doc (showString "POST") , doc (showString "{") , prt 0 jml , doc (showString "}")])


instance Print Assignable where
  prt i e = case e of
   Assignable assigs -> prPrec i 0 (concatD [doc (showString "ASSIGNABLE") , doc (showString "{") , prt 0 assigs , doc (showString "}")])


instance Print Assig where
  prt i e = case e of
   AssigJML jml -> prPrec i 0 (concatD [prt 0 jml])
   AssigE  -> prPrec i 0 (concatD [doc (showString "\\everything")])
   AssigN  -> prPrec i 0 (concatD [doc (showString "\\nothing")])

  prtList es = case es of
   [x] -> (concatD [prt 0 x])
   x:xs -> (concatD [prt 0 x , doc (showString ",") , prt 0 xs])

instance Print Methods where
  prt i e = case e of
   Methods bodymethods -> prPrec i 0 (concatD [doc (showString "METHODS") , doc (showString "{") , prt 0 bodymethods , doc (showString "}")])
   MethodsNil  -> prPrec i 0 (concatD [])


instance Print BodyMethods where
  prt i e = case e of
   BodyMemDecl memberdecls -> prPrec i 0 (concatD [prt 0 memberdecls])
   BodyImport importfile -> prPrec i 0 (concatD [prt 0 importfile])


instance Print MemberDecl where
  prt i e = case e of
   MemberDeclMethod type' id argss java -> prPrec i 0 (concatD [prt 0 type' , prt 0 id , doc (showString "(") , prt 0 argss , doc (showString ")") , doc (showString "{") , prt 0 java , doc (showString "}")])
   MemberDeclField variabledecl -> prPrec i 0 (concatD [prt 0 variabledecl])

  prtList es = case es of
   [x] -> (concatD [prt 0 x])
   x:xs -> (concatD [prt 0 x , prt 0 xs])

instance Print VariableDecl where
  prt i e = case e of
   VariableDecl type' vardecls -> prPrec i 0 (concatD [prt 0 type' , prt 0 vardecls , doc (showString ";")])


instance Print VarDecl where
  prt i e = case e of
   VarDecl id variableinitializer -> prPrec i 0 (concatD [prt 0 id , prt 0 variableinitializer])

  prtList es = case es of
   [x] -> (concatD [prt 0 x])
   x:xs -> (concatD [prt 0 x , doc (showString ",") , prt 0 xs])

instance Print VariableInitializer where
  prt i e = case e of
   VarInit varexp -> prPrec i 0 (concatD [doc (showString "=") , prt 0 varexp])
   VarInitNil  -> prPrec i 0 (concatD [])


instance Print Type where
  prt i e = case e of
   Type id -> prPrec i 0 (concatD [prt 0 id])


instance Print Args where
  prt i e = case e of
   Args type' id -> prPrec i 0 (concatD [prt 0 type' , prt 0 id])

  prtList es = case es of
   [] -> (concatD [])
   [x] -> (concatD [prt 0 x])
   x:xs -> (concatD [prt 0 x , doc (showString ",") , prt 0 xs])

instance Print ImportFile where
  prt i e = case e of
   ImportFile address -> prPrec i 0 (concatD [doc (showString "import") , prt 0 address , doc (showString ";")])


instance Print Address where
  prt i e = case e of
   Address id add -> prPrec i 0 (concatD [prt 0 id , doc (showString "/") , prt 0 add])


instance Print Add where
  prt i e = case e of
   AddBar id add -> prPrec i 0 (concatD [prt 0 id , doc (showString "/") , prt 0 add])
   AddId id -> prPrec i 0 (concatD [prt 0 id])


instance Print CondExp where
  prt i e = case e of
   CondExpId id condexp -> prPrec i 0 (concatD [prt 0 id , prt 0 condexp])
   CondExpSymb symbols condexp -> prPrec i 0 (concatD [prt 0 symbols , prt 0 condexp])
   CondExpInt n condexp -> prPrec i 0 (concatD [prt 0 n , prt 0 condexp])
   CondExpDouble d condexp -> prPrec i 0 (concatD [prt 0 d , prt 0 condexp])
   CondExpTimes condexp -> prPrec i 0 (concatD [doc (showString "*") , prt 0 condexp])
   CondExpParent condexp0 condexp -> prPrec i 0 (concatD [doc (showString "(") , prt 0 condexp0 , doc (showString ")") , prt 0 condexp])
   CondExpDot condexp -> prPrec i 0 (concatD [doc (showString ".") , prt 0 condexp])
   CondExpCorchete condexp0 condexp -> prPrec i 0 (concatD [doc (showString "[") , prt 0 condexp0 , doc (showString "]") , prt 0 condexp])
   CondExpComma condexp -> prPrec i 0 (concatD [doc (showString ",") , prt 0 condexp])
   CondExpSlash condexp -> prPrec i 0 (concatD [doc (showString "/") , prt 0 condexp])
   CondExpEq condexp -> prPrec i 0 (concatD [doc (showString "=") , prt 0 condexp])
   CondExpBar condexp -> prPrec i 0 (concatD [doc (showString "|") , prt 0 condexp])
   CondExpNil  -> prPrec i 0 (concatD [])


instance Print VarExp where
  prt i e = case e of
   VarExpId id varexp -> prPrec i 0 (concatD [prt 0 id , prt 0 varexp])
   VarExpSymb symbols varexp -> prPrec i 0 (concatD [prt 0 symbols , prt 0 varexp])
   VarExpInt n varexp -> prPrec i 0 (concatD [prt 0 n , prt 0 varexp])
   VarExpDouble d varexp -> prPrec i 0 (concatD [prt 0 d , prt 0 varexp])
   VarExpTimes varexp -> prPrec i 0 (concatD [doc (showString "*") , prt 0 varexp])
   VarExpParent varexp0 varexp -> prPrec i 0 (concatD [doc (showString "(") , prt 0 varexp0 , doc (showString ")") , prt 0 varexp])
   VarExpDot varexp -> prPrec i 0 (concatD [doc (showString ".") , prt 0 varexp])
   VarExpComma varexp -> prPrec i 0 (concatD [doc (showString ",") , prt 0 varexp])
   VarExpCorchete varexp0 varexp -> prPrec i 0 (concatD [doc (showString "[") , prt 0 varexp0 , doc (showString "]") , prt 0 varexp])
   VarExpSlash varexp -> prPrec i 0 (concatD [doc (showString "/") , prt 0 varexp])
   VarExpBar varexp -> prPrec i 0 (concatD [doc (showString "|") , prt 0 varexp])
   VarExpNil  -> prPrec i 0 (concatD [])


instance Print Java where
  prt i e = case e of
   JavaId id java -> prPrec i 0 (concatD [prt 0 id , prt 0 java])
   JavaSymb symbols java -> prPrec i 0 (concatD [prt 0 symbols , prt 0 java])
   JavaInt n java -> prPrec i 0 (concatD [prt 0 n , prt 0 java])
   JavaDouble d java -> prPrec i 0 (concatD [prt 0 d , prt 0 java])
   JavaTimes java -> prPrec i 0 (concatD [doc (showString "*") , prt 0 java])
   JavaDot java -> prPrec i 0 (concatD [doc (showString ".") , prt 0 java])
   JavaBrack java0 java -> prPrec i 0 (concatD [doc (showString "{") , prt 0 java0 , doc (showString "}") , prt 0 java])
   JavaParent java0 java -> prPrec i 0 (concatD [doc (showString "(") , prt 0 java0 , doc (showString ")") , prt 0 java])
   JavaCorchete java0 java -> prPrec i 0 (concatD [doc (showString "[") , prt 0 java0 , doc (showString "]") , prt 0 java])
   JavaEq java -> prPrec i 0 (concatD [doc (showString "=") , prt 0 java])
   JavaSemiColon java -> prPrec i 0 (concatD [doc (showString ";") , prt 0 java])
   JavaBSlash java -> prPrec i 0 (concatD [doc (showString "\\") , prt 0 java])
   JavaComma java -> prPrec i 0 (concatD [doc (showString ",") , prt 0 java])
   JavaSlash java -> prPrec i 0 (concatD [doc (showString "/") , prt 0 java])
   JavaBar java -> prPrec i 0 (concatD [doc (showString "|") , prt 0 java])
   JavaNil  -> prPrec i 0 (concatD [])


instance Print JML where
  prt i e = case e of
   JMLId id jml -> prPrec i 0 (concatD [prt 0 id , prt 0 jml])
   JMLMath symbols jml -> prPrec i 0 (concatD [prt 0 symbols , prt 0 jml])
   JMLInt n jml -> prPrec i 0 (concatD [prt 0 n , prt 0 jml])
   JMLDouble d jml -> prPrec i 0 (concatD [prt 0 d , prt 0 jml])
   JMLTimes jml -> prPrec i 0 (concatD [doc (showString "*") , prt 0 jml])
   JMLDot jml -> prPrec i 0 (concatD [doc (showString ".") , prt 0 jml])
   JMLBrack jml0 jml -> prPrec i 0 (concatD [doc (showString "{") , prt 0 jml0 , doc (showString "}") , prt 0 jml])
   JMLParent jml0 jml -> prPrec i 0 (concatD [doc (showString "(") , prt 0 jml0 , doc (showString ")") , prt 0 jml])
   JMLCorchete jml0 jml -> prPrec i 0 (concatD [doc (showString "[") , prt 0 jml0 , doc (showString "]") , prt 0 jml])
   JMLSemiColon jml -> prPrec i 0 (concatD [doc (showString ";") , prt 0 jml])
   JMLEq jml -> prPrec i 0 (concatD [doc (showString "=") , prt 0 jml])
   JMLComma jml -> prPrec i 0 (concatD [doc (showString ",") , prt 0 jml])
   JMLSlash jml -> prPrec i 0 (concatD [doc (showString "/") , prt 0 jml])
   JMLBar jml -> prPrec i 0 (concatD [doc (showString "|") , prt 0 jml])
   JMLBackS jml -> prPrec i 0 (concatD [doc (showString "\\") , prt 0 jml])
   JMLOld jml0 jml -> prPrec i 0 (concatD [doc (showString "\\old(") , prt 0 jml0 , doc (showString ")") , prt 0 jml])
   JMLRes jml -> prPrec i 0 (concatD [doc (showString "\\result") , prt 0 jml])
   JMLForallRT id0 id bodyf jml -> prPrec i 0 (concatD [doc (showString "(\\forall") , prt 0 id0 , prt 0 id , prt 0 bodyf , doc (showString ")") , prt 0 jml])
   JMLExistsRT id0 id bodyf jml -> prPrec i 0 (concatD [doc (showString "(\\exists") , prt 0 id0 , prt 0 id , prt 0 bodyf , doc (showString ")") , prt 0 jml])
   JMLNil  -> prPrec i 0 (concatD [])


instance Print BodyF where
  prt i e = case e of
   BodyF rangeterm -> prPrec i 0 (concatD [doc (showString ";") , prt 0 rangeterm])


instance Print RangeTerm where
  prt i e = case e of
   RangeTerm jml0 jml -> prPrec i 0 (concatD [prt 0 jml0 , doc (showString ";") , prt 0 jml])
   OnlyRange jml -> prPrec i 0 (concatD [prt 0 jml])



