

module Absppdate where

-- Haskell module generated by the BNF converter




newtype Id = Id String deriving (Eq,Ord,Show,Read)
newtype Symbols = Symbols String deriving (Eq,Ord,Show,Read)
data AbsPPDATE =
   AbsPPDATE Imports Global CInvariants Contracts Methods
  deriving (Eq,Ord,Show,Read)

data Imports =
   Imports [Import]
  deriving (Eq,Ord,Show,Read)

data Import =
   Import [JavaFiles]
  deriving (Eq,Ord,Show,Read)

data JavaFiles =
   JavaFiles Id
  deriving (Eq,Ord,Show,Read)

data Global =
   Global Context
  deriving (Eq,Ord,Show,Read)

data Context =
   Ctxt Variables Events Properties Foreaches
  deriving (Eq,Ord,Show,Read)

data Variables =
   VarNil
 | VarDef [Variable]
  deriving (Eq,Ord,Show,Read)

data Variable =
   Var VarModifier Type [VarDecl]
  deriving (Eq,Ord,Show,Read)

data VarModifier =
   VarModifierFinal
 | VarModifierNil
  deriving (Eq,Ord,Show,Read)

data Events =
   EventsNil
 | EventsDef [Event]
  deriving (Eq,Ord,Show,Read)

data Event =
   Event Id [Bind] CompoundEvent WhereClause
  deriving (Eq,Ord,Show,Read)

data CompoundEvent =
   Collection EventList
 | NormalEvent Binding Id [Vars] EventVariation
 | ClockEvent Id Integer
 | OnlyId Id
 | OnlyIdPar Id
  deriving (Eq,Ord,Show,Read)

data EventList =
   CECollection [CompoundEvent]
  deriving (Eq,Ord,Show,Read)

data EventVariation =
   EVEntry
 | EVExit [Vars]
 | EVThrow [Vars]
 | EVHadle [Vars]
  deriving (Eq,Ord,Show,Read)

data Binding =
   BindingVar Bind
  deriving (Eq,Ord,Show,Read)

data Bind =
   BindStar
 | BindType Type Id
 | BindId Id
  deriving (Eq,Ord,Show,Read)

data WhereClause =
   WhereClauseNil
 | WhereClauseDef [WhereExp]
  deriving (Eq,Ord,Show,Read)

data WhereExp =
   WhereExp Bind VarExp
  deriving (Eq,Ord,Show,Read)

data Vars =
   Vars Bind
  deriving (Eq,Ord,Show,Read)

data Properties =
   PropertiesNil
 | ProperiesDef Id States Transitions Properties
  deriving (Eq,Ord,Show,Read)

data States =
   States Accepting Bad Normal Starting
  deriving (Eq,Ord,Show,Read)

data Accepting =
   AcceptingNil
 | AcceptingDef [State]
  deriving (Eq,Ord,Show,Read)

data Bad =
   BadNil
 | BadDef [State]
  deriving (Eq,Ord,Show,Read)

data Normal =
   NormalNil
 | NormalDef [State]
  deriving (Eq,Ord,Show,Read)

data Starting =
   StartingDef [State]
  deriving (Eq,Ord,Show,Read)

data State =
   State NameState InitialCode ContractNames
  deriving (Eq,Ord,Show,Read)

data NameState =
   NameState Id
  deriving (Eq,Ord,Show,Read)

data ContractNames =
   CNS [ContractName]
 | CNSNil
  deriving (Eq,Ord,Show,Read)

data ContractName =
   CN Id
  deriving (Eq,Ord,Show,Read)

data InitialCode =
   InitNil
 | InitProg Java
  deriving (Eq,Ord,Show,Read)

data Transitions =
   Transitions [Transition]
  deriving (Eq,Ord,Show,Read)

data Transition =
   Transition NameState NameState Arrow
  deriving (Eq,Ord,Show,Read)

data Arrow =
   Arrow Id Condition
  deriving (Eq,Ord,Show,Read)

data Condition =
   Cond1
 | Cond2 Cond
  deriving (Eq,Ord,Show,Read)

data Cond =
   CondExpDef CondExp
 | CondAction CondExp Action
  deriving (Eq,Ord,Show,Read)

data Action =
   Action Java
  deriving (Eq,Ord,Show,Read)

data Foreaches =
   ForeachesNil
 | ForeachesDef [Args] Context
  deriving (Eq,Ord,Show,Read)

data CInvariants =
   CInvariants [CInvariant]
 | CInvempty
  deriving (Eq,Ord,Show,Read)

data CInvariant =
   CI Id JML
  deriving (Eq,Ord,Show,Read)

data Contracts =
   Contracts [Contract]
 | Constempty
  deriving (Eq,Ord,Show,Read)

data Contract =
   Contract Id Pre Method Post Assignable
  deriving (Eq,Ord,Show,Read)

data Pre =
   Pre JML
  deriving (Eq,Ord,Show,Read)

data Method =
   Method Id Id
  deriving (Eq,Ord,Show,Read)

data Post =
   Post JML
  deriving (Eq,Ord,Show,Read)

data Assignable =
   Assignable [Assig]
  deriving (Eq,Ord,Show,Read)

data Assig =
   AssigJML JML
 | AssigE
 | AssigN
  deriving (Eq,Ord,Show,Read)

data Methods =
   Methods BodyMethods
 | MethodsNil
  deriving (Eq,Ord,Show,Read)

data BodyMethods =
   BodyMemDecl [MemberDecl]
 | BodyImport ImportFile
  deriving (Eq,Ord,Show,Read)

data MemberDecl =
   MemberDeclMethod Type Id [Args] Java
 | MemberDeclField VariableDecl
  deriving (Eq,Ord,Show,Read)

data VariableDecl =
   VariableDecl Type [VarDecl]
  deriving (Eq,Ord,Show,Read)

data VarDecl =
   VarDecl Id VariableInitializer
  deriving (Eq,Ord,Show,Read)

data VariableInitializer =
   VarInit VarExp
 | VarInitNil
  deriving (Eq,Ord,Show,Read)

data Type =
   Type Id
  deriving (Eq,Ord,Show,Read)

data Args =
   Args Type Id
  deriving (Eq,Ord,Show,Read)

data ImportFile =
   ImportFile Address
  deriving (Eq,Ord,Show,Read)

data Address =
   Address Id Add
  deriving (Eq,Ord,Show,Read)

data Add =
   AddBar Id Add
 | AddId Id
  deriving (Eq,Ord,Show,Read)

data CondExp =
   CondExpId Id CondExp
 | CondExpSymb Symbols CondExp
 | CondExpInt Integer CondExp
 | CondExpDouble Double CondExp
 | CondExpTimes CondExp
 | CondExpParent CondExp CondExp
 | CondExpDot CondExp
 | CondExpCorchete CondExp CondExp
 | CondExpComma CondExp
 | CondExpSlash CondExp
 | CondExpEq CondExp
 | CondExpBar CondExp
 | CondExpNil
  deriving (Eq,Ord,Show,Read)

data VarExp =
   VarExpId Id VarExp
 | VarExpSymb Symbols VarExp
 | VarExpInt Integer VarExp
 | VarExpDouble Double VarExp
 | VarExpTimes VarExp
 | VarExpParent VarExp VarExp
 | VarExpDot VarExp
 | VarExpComma VarExp
 | VarExpCorchete VarExp VarExp
 | VarExpSlash VarExp
 | VarExpBar VarExp
 | VarExpNil
  deriving (Eq,Ord,Show,Read)

data Java =
   JavaId Id Java
 | JavaSymb Symbols Java
 | JavaInt Integer Java
 | JavaDouble Double Java
 | JavaTimes Java
 | JavaDot Java
 | JavaBrack Java Java
 | JavaParent Java Java
 | JavaCorchete Java Java
 | JavaEq Java
 | JavaSemiColon Java
 | JavaBSlash Java
 | JavaComma Java
 | JavaSlash Java
 | JavaBar Java
 | JavaNil
  deriving (Eq,Ord,Show,Read)

data JML =
   JMLId Id JML
 | JMLMath Symbols JML
 | JMLInt Integer JML
 | JMLDouble Double JML
 | JMLTimes JML
 | JMLDot JML
 | JMLBrack JML JML
 | JMLParent JML JML
 | JMLCorchete JML JML
 | JMLSemiColon JML
 | JMLEq JML
 | JMLComma JML
 | JMLSlash JML
 | JMLBar JML
 | JMLBackS JML
 | JMLOld JML JML
 | JMLRes JML
 | JMLForallRT Id Id BodyF JML
 | JMLExistsRT Id Id BodyF JML
 | JMLNil
  deriving (Eq,Ord,Show,Read)

data BodyF =
   BodyF RangeTerm
  deriving (Eq,Ord,Show,Read)

data RangeTerm =
   RangeTerm JML JML
 | OnlyRange JML
  deriving (Eq,Ord,Show,Read)

