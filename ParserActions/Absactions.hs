

module Absactions where

-- Haskell module generated by the BNF converter




newtype IdAct = IdAct String deriving (Eq,Ord,Show,Read)
data Actions =
   Actions [Action]
  deriving (Eq,Ord,Show,Read)

data Action =
   ActProg Program
 | ActBlock Actions
 | ActCreate Template Args
 | ActBang IdAct
 | ActCond [IdAct] Action
 | ActSkip
 | ActLog String Params
 | ActAssig IdAct IdAct
  deriving (Eq,Ord,Show,Read)

data Program =
   Prog IdAct [Args]
  deriving (Eq,Ord,Show,Read)

data Template =
   Temp IdAct
  deriving (Eq,Ord,Show,Read)

data Args =
   ArgsId IdAct
 | ArgsS String
  deriving (Eq,Ord,Show,Read)

data Params =
   ParamsNil
 | Params [Param]
  deriving (Eq,Ord,Show,Read)

data Param =
   Param IdAct
  deriving (Eq,Ord,Show,Read)

