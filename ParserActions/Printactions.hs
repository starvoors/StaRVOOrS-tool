{-# OPTIONS_GHC -fno-warn-incomplete-patterns #-}
module Printactions where

-- pretty-printer generated by the BNF converter

import Absactions
import Data.Char


-- the top-level printing method
printTree :: Print a => a -> String
printTree = render . prt 0

type Doc = [ShowS] -> [ShowS]

doc :: ShowS -> Doc
doc = (:)

-- Modify to remove white space before '[' and '('
-- Modify to remove white space between ==
-- Modify to remove white spaces around '.'
-- Modify to remove white space after '\\' and '!'
-- Modify to remove white space in "> =", "< =" , "! =" "& &" and "| |"
-- Modify to remove white space after openning \" and before closing \"
render :: Doc -> String
render d = rend 0 (map ($ "") $ d []) "" where
  rend i ss = case ss of
    "\\"     :ts -> showChar '\\' . rend i ts
    t:"+":"+":ts -> showString t . showChar '+' . space "+" . rend i ts
    t:"-":"-":ts -> showString t . showChar '-' . space "-" . rend i ts
    t: "%"   :ts -> space t . showChar '%' . rend i ts
    t: "."   :ts -> showString t . showChar '.' . rend i ts 
    "=" :"=" :ts -> showChar '=' . space "=" . rend i ts
    ">" :"=" :ts -> showChar '>' . space "=" . rend i ts
    "<" :"=" :ts -> showChar '<' . space "=" . rend i ts
    "!" :"=" :ts -> showChar '!' . space "=" . rend i ts
    "!" :t   :ts -> showChar '!' . showString t . rend i ts
    "&" :"&" :ts -> showChar '&' . space "&" . rend i ts
    "|" :"|" :ts -> showChar '|' . space "|" . rend i ts
    t : "["  :ts -> showString t . showChar '[' . rend i ts
    t : "("  :ts -> showString t . showChar '(' . rend i ts
    "{"      :ts -> showChar '{' . new (i+1) . rend (i+1) ts
    "}" : ";":ts -> new (i-1) . space "}" . showChar ';' . new (i-1) . rend (i-1) ts
    "}"      :ts -> new (i-1) . showChar '}' . new (i-1) . rend (i-1) ts
    ";"      :ts -> showChar ';' . new i . rend i ts
    t  : "," :ts -> showString t . space "," . rend i ts
    t  : ")" :ts -> showString t . showString ") " . rend i ts
    t  : "]" :ts -> showString t . showChar ']' . rend i ts
    "\""     :ts -> showChar '\"' . rend i ts
    t  :"\"" :ts -> if (t == " ") then showChar '\"' . rend i ts 
                                  else showString t . showChar '\"' . rend i ts 
    t        :ts -> space t . rend i ts
    _            -> id
  new i   = showChar '\n' . replicateS (2*i) (showChar ' ') . dropWhile isSpace
  space t = showString t . (\s -> if null s then "" else (' ':s))

parenth :: Doc -> Doc
parenth ss = doc (showChar '(') . ss . doc (showChar ')')

concatS :: [ShowS] -> ShowS
concatS = foldr (.) id

concatD :: [Doc] -> Doc
concatD = foldr (.) id

replicateS :: Int -> ShowS -> ShowS
replicateS n f = concatS (replicate n f)

-- the printer class does the job
class Print a where
  prt :: Int -> a -> Doc
  prtList :: [a] -> Doc
  prtList = concatD . map (prt 0)

instance Print a => Print [a] where
  prt _ = prtList

instance Print Char where
  prt _ s = doc (showChar '\'' . mkEsc '\'' s . showChar '\'')
  prtList s = doc (showChar '"' . concatS (map (mkEsc '"') s) . showChar '"')

mkEsc :: Char -> Char -> ShowS
mkEsc q s = case s of
  _ | s == q -> showChar '\\' . showChar s
  '\\'-> showString "\\\\"
  '\n' -> showString "\\n"
  '\t' -> showString "\\t"
  _ -> showChar s

prPrec :: Int -> Int -> Doc -> Doc
prPrec i j = if j<i then parenth else id


instance Print Integer where
  prt _ x = doc (shows x)


instance Print Double where
  prt _ x = doc (shows x)



instance Print IdAct where
  prt _ (IdAct i) = doc (showString ( i))
  prtList es = case es of
   [] -> (concatD [])
   x:xs -> (concatD [prt 0 x , prt 0 xs])



instance Print Actions where
  prt i e = case e of
   Actions actions -> prPrec i 0 (concatD [prt 0 actions])


instance Print Action where
  prt i e = case e of
   ActProg program -> prPrec i 0 (concatD [prt 0 program])
   ActBlock actions -> prPrec i 0 (concatD [doc (showString "{") , prt 0 actions , doc (showString "}")])
   ActCreate template args -> prPrec i 0 (concatD [doc (showString "create") , doc (showString "(") , prt 0 template , doc (showString ",") , prt 0 args , doc (showString ")")])
   ActBang idact -> prPrec i 0 (concatD [doc (showString "bang") , doc (showString "(") , prt 0 idact , doc (showString ")")])
   ActCond idacts action -> prPrec i 0 (concatD [doc (showString "if") , doc (showString "(") , prt 0 idacts , doc (showString ")") , doc (showString "then") , prt 0 action])
   ActSkip  -> prPrec i 0 (concatD [])
   ActLog str params -> prPrec i 0 (concatD [doc (showString "LOG") , doc (showString "(") , prt 0 str , prt 0 params , doc (showString ")")])
   ActAssig idact0 idact -> prPrec i 0 (concatD [prt 0 idact0 , doc (showString "=") , prt 0 idact])

  prtList es = case es of
   [] -> (concatD [])
   x:xs -> (concatD [prt 0 x , doc (showString ";") , prt 0 xs])

instance Print Program where
  prt i e = case e of
   Prog idact argss -> prPrec i 0 (concatD [prt 0 idact , doc (showString "(") , prt 0 argss , doc (showString ")")])


instance Print Template where
  prt i e = case e of
   Temp idact -> prPrec i 0 (concatD [prt 0 idact])


instance Print Args where
  prt i e = case e of
   ArgsId idact -> prPrec i 0 (concatD [prt 0 idact])
   ArgsS str -> prPrec i 0 (concatD [prt 0 str])

  prtList es = case es of
   [] -> (concatD [])
   [x] -> (concatD [prt 0 x])
   x:xs -> (concatD [prt 0 x , doc (showString ",") , prt 0 xs])

instance Print Params where
  prt i e = case e of
   ParamsNil  -> prPrec i 0 (concatD [])
   Params params -> prPrec i 0 (concatD [doc (showString ",") , prt 0 params])


instance Print Param where
  prt i e = case e of
   Param idact -> prPrec i 0 (concatD [prt 0 idact])

  prtList es = case es of
   [x] -> (concatD [prt 0 x])
   x:xs -> (concatD [prt 0 x , doc (showString ",") , prt 0 xs])


