module Skelactions where

-- Haskell module generated by the BNF converter

import Absactions
import ErrM
type Result = Err String

failure :: Show a => a -> Result
failure x = Bad $ "Undefined case: " ++ show x

transIdAct :: IdAct -> Result
transIdAct x = case x of
  IdAct str  -> failure x


transActions :: Actions -> Result
transActions x = case x of
  Actions actions  -> failure x


transAction :: Action -> Result
transAction x = case x of
  ActProg program  -> failure x
  ActBlock actions  -> failure x
  ActCreate template args  -> failure x
  ActBang idact  -> failure x
  ActCond idacts action  -> failure x
  ActSkip  -> failure x
  ActLog str params  -> failure x
  ActAssig idact1 idact2  -> failure x


transProgram :: Program -> Result
transProgram x = case x of
  Prog idact argss  -> failure x


transTemplate :: Template -> Result
transTemplate x = case x of
  Temp idact  -> failure x


transArgs :: Args -> Result
transArgs x = case x of
  ArgsId idact  -> failure x
  ArgsS str  -> failure x


transParams :: Params -> Result
transParams x = case x of
  ParamsNil  -> failure x
  Params params  -> failure x


transParam :: Param -> Result
transParam x = case x of
  Param idact  -> failure x



